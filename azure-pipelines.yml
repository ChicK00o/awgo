# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  batch: true
  paths:
    exclude:
      - README.md
      - LICENCE
      - TODO
      - icon.*
      - env
      - bench.py
      - modd.conf
      - .gitignore
      - .travis.yml
      - bin/*

pool:
  vmImage: 'macOS-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/opt/go/libexec' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  BUILD_NUMBER: '$(Build.BuildNumber)'
  CI_PULL_REQUEST: '$(Build.SourceBranch)'
  CI_PKG_NAME: 'github.com/$(Build.Repository.Name)'
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
    go version
  displayName: 'Set up Go'

# Dump environment for debugging
#- script: |
#     env | grep SYSTEM_ | sort
#     env | grep BUILD_ | sort
#     env | grep CI_ | sort
#  workingDirectory: '$(modulePath)'
#  displayName: Environment

- script: |
      go get -v -t -d ./...
  workingDirectory: '$(modulePath)'
  displayName: Fetch Code

- script: |
    go install golang.org/x/lint/golint
    golint -set_exit_status ./...
  workingDirectory: '$(modulePath)'
  displayName: Lint

- script: |
    ./run-tests.sh -ic ./...
  workingDirectory: '$(modulePath)'
  displayName: Run Tests

# secrets are only available set for non-fork PRs
# - script: |
#     if [[ "$CODECOV_TOKEN" != "" ]]; then
#       bash <(curl -s https://codecov.io/bash); true
#     else
#       echo "CODECOV_TOKEN not set; skipping upload"
#     fi
#   displayName: Codecov
#   workingDirectory: '$(modulePath)'
#   env:
#     CODECOV_TOKEN: '$(Codecov.Token)'

# secrets are only available set for non-fork PRs
# - script: |
#     if [[ "$CODACY_TOKEN" != "" ]]; then
#       go run github.com/schrej/godacov -r coverage.out -t $CODACY_TOKEN -c $BUILD_SOURCEVERSION; true
#     else
#       echo "CODACY_TOKEN not set; skipping upload"
#     fi
#   workingDirectory: '$(modulePath)'
#   displayName: Codacy
#   env:
#     CODACY_TOKEN: '$(Codacy.Token)'
